import { ScoredTranslationType } from "./translationUtils";

export const AIPromptTemplate =
`Using the following translation data, identify words in the provided Translated text that correspond to translations of \`{sourceWord}\`. Return your results in CSV format with columns for "sourceText", “translatedText" and “score”:

Translation Data:
{translationCsv}


Translated Text
\`\`\`
{translatedText}
\`\`\`

Ensure the CSV output is structured with columns of:
\`translatedText,sourceText,score\`

Provide only the translations that appear in the text.`


/**
 * Calls the LM Studio API with the specified prompt and returns the generated text.
 *
 * @param {string} prompt - The text prompt to send to the LM Studio API for text generation.
 * @return {Promise<string|null>} A promise that resolves to the text generated by the LM Studio API
 * or null if an error occurs during the API call.
 */
export async function callLmStudioAPI(prompt: string) {
  // Call the LM Studio API using the generated prompt
  const apiUrl = "<LM_STUDIO_API_URL>"; // Replace with your LM Studio API endpoint
  const apiKey = "<YOUR_API_KEY>"; // Replace with your LM Studio API key

  const postData = {
    prompt,
    max_tokens: 150, // Adjust the max tokens based on your use case
    temperature: 0.7, // Control randomness in generation
    top_p: 1.0, // Token sampling parameter
  };

  try {
    const response = await fetch(apiUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`,
      },
      body: JSON.stringify(postData),
    });

    if (response.ok) {
      const jsonResponse = await response.json();
      console.log("LM Studio API Response:", jsonResponse);
      // @ts-ignore
      const generatedText = jsonResponse?.choices?.[0]?.text || "";
      console.log("Generated Text:", generatedText);
      // You can further utilize or display the `generatedText` as needed
      return generatedText;
    } else {
      console.error(
        `Error calling LM Studio API: ${response.status} ${response.statusText}`,
      );
    }
  } catch (error) {
    console.error("Error in LM Studio API call:", error);
  }
  return null
}

/**
 * Sorts an array of objects by their "score" property in either ascending or descending order.
 *
 * @param {ScoredTranslationType[]} topMatches - The array of objects to be sorted. Each object is expected to have a "score" property.
 * @param {boolean} [descending=true] - Flag indicating the sorting order. If true, the array will be sorted in descending order.
 * @return {ScoredTranslationType[]} The sorted array of objects.
 */
export function sortByScore(topMatches:ScoredTranslationType[], descending:boolean = true) {
  if (descending) {
    // @ts-ignore
    return topMatches.sort((a, b) => b.score - a.score);
  }
  // sort in ascending order
  // @ts-ignore
  return topMatches.sort((a, b) => a.score - b.score);
}

