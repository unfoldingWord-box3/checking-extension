{
  "name": "checking-extension",
  "displayName": "checking-extension",
  "description": "A vscode extension to open tn_check and twl_check files for checking verses",
  "version": "0.9.14",
  "publisher": "unfoldingWord",
  "engines": {
    "vscode": "^1.91.0"
  },
  "categories": [
    "Other"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/unfoldingWord-box3/checking-extension"
  },
  "activationEvents": [],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "title": "Translation Checking: Launch Initialize",
        "command": "checking-extension.launchWorkflow"
      },
      {
        "title": "Translation Checking: Launch Initialize - WARNING Prerelease Resources",
        "command": "checking-extension.launchWorkflowPre"
      },
      {
        "title": "Translation Checking: Download Project",
        "command": "checking-extension.downloadProject"
      }
    ],
    "customEditors": [
      {
        "viewType": "checking-extension.translationChecker",
        "displayName": "Translation Checking: Make Selections for Translation Words and Notes",
        "selector": [
          {
            "filenamePattern": "*.twl_check"
          },
          {
            "filenamePattern": "*.tn_check"
          }
        ],
        "priority": "default"
      }
    ],
    "viewsWelcome": [
      {
        "view": "workbench.explorer.emptyView",
        "contents": "==================\nTo Create a new Translation Checking Project, click on the 'Create Checking Project' button below:\n[Create Checking Project](command:checking-extension.launchWorkflow)"
      }
    ],
    "walkthroughs": [
      {
        "id": "initChecking",
        "title": "Initialize Checking",
        "description": "A checking workflow.\nTo clear the workflow, do `CTRL-SIHFT-P` (on Mac do`CMD-SHIFT-P`) and select `Developer: Reset Welcome Page Walkthrough Progress`",
        "steps": [
          {
            "id": "preReleaseContent",
            "title": "WARNING using Pre-Release Resources",
            "description": "WARNING using Pre-Release Resources.\n[Switch to use only Released Content](command:checking-extension.useReleased)",
            "media": {
              "image": "media/folder-active.png",
              "altText": "Select Project Folder"
            },
            "completionEvents": [
              "onContext:fetchedCatalog"
            ],
            "when": "preRelease"
          },
          {
            "id": "fetchCatalogPreRelease",
            "title": "Fetch Latest PreRelease Resource List/Catalog",
            "description": "If you want to get the latest Pre-Release Resources List/Catalog.  This may take a few minutes on slow connections.\n[Download Pre-Release Catalog](command:checking-extension.downloadCatalog)",
            "media": {
              "image": "media/folder-active.png",
              "altText": "Select Project Folder"
            },
            "completionEvents": [
              "onContext:fetchedCatalog"
            ],
            "when": "preRelease"
          },
          {
            "id": "fetchCatalog",
            "title": "Fetch Latest Resource List/Catalog",
            "description": "If you want to get the latest Resources List/Catalog.  This may take a few minutes on slow connections.\n[Download Catalog](command:checking-extension.downloadCatalog)",
            "media": {
              "image": "media/folder-active.png",
              "altText": "Select Project Folder"
            },
            "completionEvents": [
              "onContext:fetchedCatalog"
            ],
            "when": "!preRelease"
          },
          {
            "id": "selectTargetBible",
            "title": "Select Target Bible",
            "description": "Now that we have the Resource List/Catalog, let's choose the Target Bible.\n[Select Target Bible](command:checking-extension.selectTargetBible)",
            "media": {
              "image": "media/name-project.png",
              "altText": "Select target Language"
            },
            "completionEvents": [
              "onContext:targetBibleOptions"
            ]
          },
          {
            "id": "selectGatewayLanguage",
            "title": "Select Gateway Language & Download Resources",
            "description": "Now that we have selected the Target Bible, let's choose the Gateway Language options.  Then we download GL resources\n[Select gateway Language](command:checking-extension.selectGL)",
            "media": {
              "image": "media/name-project.png",
              "altText": "Select gateway Language"
            },
            "completionEvents": [
              "onContext:selectedGL"
            ]
          },
          {
            "id": "loadTarget",
            "title": "Download Target Bible and Create Project",
            "description": "Now that we have downloaded the Gateway Language Resources, let's download the Target Bible and create the checking project.\n[Download Target Bible](command:checking-extension.loadTargetBible)",
            "media": {
              "image": "media/name-project.png",
              "altText": "Download Target Language"
            },
            "completionEvents": [
              "onContext:targetBibleLoaded",
              "onContext:projectInitialized"
            ]
          }
        ]
      }
    ]
  },
  "private": true,
  "scripts": {
    "vscode:prepublish": "webpack --mode production",
    "webpack": "webpack --mode development",
    "webpack-dev": "webpack --mode development --watch",
    "test-compile": "tsc -p ./",
    "compile": "npm run webpack",
    "compile:debug": "tsc -p ./ --outDir ./dist",
    "watch": "tsc -watch -p ./ --outDir ./dist",
    "install:all": "npm run install:webview && npm run install:extension",
    "install:extension": "yarn install",
    "install:webview": "cd webview-ui && pnpm install",
    "build:all": "npm run build:webview && npm run compile",
    "build:all-debug": "npm run build:webview-debug && npm run compile:debug",
    "build:debug": "npm run compile:debug",
    "start:webview": "cd webview-ui && pnpm run start",
    "build:webview": "cd webview-ui && pnpm run build",
    "build:webview-debug": "cd webview-ui && pnpm run build:dev",
    "pretest": "yarn run compile:debug",
    "lint": "eslint src --ext ts",
    "test": "vscode-test",
    "test:unit": "yarn run compile:debug && vscode-test",
    "pre-package:webview": "npm run install:webview && npm run build:webview",
    "package:extension": "yarn install && vsce package --yarn"
  },
  "devDependencies": {
    "@types/axios": "^0.14.4",
    "@vscode/test-cli": "^0.0.9",
    "@vscode/test-electron": "^2.4.0",
    "ts-loader": "^9.5.1",
    "webpack": "^5.93.0",
    "webpack-cli": "^5.1.4"
  },
  "dependencies": {
    "@types/mocha": "^10.0.7",
    "@types/node": "20.x",
    "@types/vscode": "^1.91.0",
    "@typescript-eslint/eslint-plugin": "^7.14.1",
    "@typescript-eslint/parser": "^7.11.0",
    "@vscode/codicons": "^0.0.35",
    "axios": "^1.7.7",
    "base-64": "0.1.0",
    "bible-reference-range": "^1.1.1",
    "deep-equal": "1.0.1",
    "diff": "^5.2.0",
    "eslint": "^8.57.0",
    "eslint-config-eslint": "^11.0.0",
    "eslint-plugin-jsdoc": "^48.10.1",
    "fs-extra": "^11.2.0",
    "lodash.clonedeep": "^4.5.0",
    "original-fs": "^1.2.0",
    "ospath": "^1.2.2",
    "string-punctuation-tokenizer": "^2.2.0",
    "tc-source-content-updater": "1.4.31",
    "tsv-groupdata-parser": "^1.1.1",
    "typescript": "^5.4.5",
    "usfm-js": "^3.4.2",
    "utf8": "3.0.0",
    "uw-tsv-parser": "^1.0.3",
    "yamljs": "^0.3.0"
  }
}
